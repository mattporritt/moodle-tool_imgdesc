{"version":3,"file":"describe.min.js","sources":["../src/describe.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Image description UI helpers (generate/regenerate + feedback).\n *\n * @module     tool_imgdesc/describe\n * @copyright  Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as Str from 'core/str';\n\n/**\n * Toggle footer buttons visibility.\n *\n * @param {String} uniqid\n * @param {Boolean} show\n */\nconst toggleFooterButtons = (uniqid, show) => {\n    const footer = document.getElementById(`${uniqid}-footer`);\n    if (!footer) {\n        return;\n    }\n    if (show) {\n        footer.classList.remove('d-none');\n    } else {\n        footer.classList.add('d-none');\n    }\n};\n\n/**\n * Put an animated spinner into the target (clears any previous text).\n * Uses Bootstrap spinner classes available in core themes.\n *\n * @param {HTMLElement} target\n * @returns {Promise<void>}\n */\nconst showLoading = async (target) => {\n    target.setAttribute('aria-busy', 'true');\n    target.setAttribute('aria-live', 'polite');\n    target.classList.add('bg-light');\n\n    const label = await Str.get_string('generating', 'tool_imgdesc');\n    target.innerHTML = `\n        <div class=\"d-flex align-items-center gap-2\">\n            <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n            <span>${label}</span>\n        </div>\n    `;\n};\n\n/**\n * Render a plaintext description into the target element.\n *\n * @param {HTMLElement} target\n * @param {String} description\n */\nconst renderDescription = (target, description) => {\n    target.removeAttribute('aria-busy');\n    target.classList.remove('bg-light');\n\n    const escaped = document.createElement('div');\n    escaped.textContent = (description ?? '').toString();\n\n    target.innerHTML = `<div class=\"text-body\">${escaped.innerHTML.replace(/\\n/g, '<br>')}</div>`;\n};\n\n/**\n * Main entry to kick off generation.\n *\n * @param {String} textboxId - DOM id of the text container (e.g., \"{{uniqid}}-text-box\")\n * @param {Number} contextid  - Draft file area context ID\n * @param {Number} itemid     - Draft file item ID\n * @param {String} uniqid     - Unique id used to bind button handlers\n */\nexport const generate = async (textboxId, contextid, itemid, uniqid) => {\n    const requestobj = {\n        methodname: 'tool_imgdesc_describe_image',\n        args: {\n            contextid: contextid,\n            itemid: itemid,\n        }\n    };\n    const textarea = document.getElementById(textboxId);\n\n    // --- Clear current text and show animated loading while we call the WS.\n    await showLoading(textarea);\n\n    try {\n        const responseObj = await Ajax.call([requestobj])[0];\n        if (responseObj && responseObj.error) {\n            renderDescription(textarea, responseObj.error);\n        } else {\n            renderDescription(textarea, responseObj?.generatedcontent ?? '');\n        }\n    } catch (error) {\n        renderDescription(textarea, (error?.message ?? error)?.toString());\n    }\n\n    // After a response (success or failure), allow actions again.\n    toggleFooterButtons(uniqid, true);\n};\n\n/**\n * Wire up footer actions:\n *  - Regenerate: re-run generation with same contextid/itemid (clears text -> spinner immediately).\n *  - New image: do a soft reset (reload the page so user gets original form).\n *\n * @param {String} uniqid\n * @param {String} textboxId\n * @param {Number} contextid\n * @param {Number} itemid\n */\nconst bindFooterActions = (uniqid, textboxId, contextid, itemid) => {\n    const regen = document.getElementById(`${uniqid}-btn-regenerate`);\n    const reset = document.getElementById(`${uniqid}-btn-newimage`);\n\n    if (regen) {\n        regen.addEventListener('click', async (e) => {\n            e.preventDefault();\n            toggleFooterButtons(uniqid, false);\n\n            // Immediately clear existing text and show spinner before the call.\n            const textarea = document.getElementById(textboxId);\n            await showLoading(textarea);\n\n            await generate(textboxId, contextid, itemid, uniqid);\n        });\n    }\n\n    if (reset) {\n        reset.addEventListener('click', (e) => {\n            e.preventDefault();\n            window.location.href = window.location.pathname + window.location.search;\n        });\n    }\n};\n\n/**\n * Public bootstrap called from the template JS block.\n *\n * @param {String} textboxId\n * @param {Number} contextid\n * @param {Number} itemid\n * @param {String} uniqid\n */\nexport const init = (textboxId, contextid, itemid, uniqid) => {\n    bindFooterActions(uniqid, textboxId, contextid, itemid);\n    return generate(textboxId, contextid, itemid, uniqid);\n};\n"],"names":["toggleFooterButtons","uniqid","show","footer","document","getElementById","classList","remove","add","showLoading","async","target","setAttribute","label","Str","get_string","innerHTML","renderDescription","description","removeAttribute","escaped","createElement","textContent","toString","replace","generate","textboxId","contextid","itemid","requestobj","methodname","args","textarea","responseObj","Ajax","call","error","generatedcontent","message","_ref","regen","reset","addEventListener","e","preventDefault","window","location","href","pathname","search","bindFooterActions"],"mappings":";;;;;;;ukCAgCMA,oBAAsB,CAACC,OAAQC,cAC3BC,OAASC,SAASC,yBAAkBJ,mBACrCE,SAGDD,KACAC,OAAOG,UAAUC,OAAO,UAExBJ,OAAOG,UAAUE,IAAI,YAWvBC,YAAcC,MAAAA,SAChBC,OAAOC,aAAa,YAAa,QACjCD,OAAOC,aAAa,YAAa,UACjCD,OAAOL,UAAUE,IAAI,kBAEfK,YAAcC,IAAIC,WAAW,aAAc,gBACjDJ,OAAOK,oMAGSH,wCAWdI,kBAAoB,CAACN,OAAQO,eAC/BP,OAAOQ,gBAAgB,aACvBR,OAAOL,UAAUC,OAAO,kBAElBa,QAAUhB,SAASiB,cAAc,OACvCD,QAAQE,aAAeJ,MAAAA,YAAAA,YAAe,IAAIK,WAE1CZ,OAAOK,2CAAsCI,QAAQJ,UAAUQ,QAAQ,MAAO,mBAWrEC,SAAWf,MAAOgB,UAAWC,UAAWC,OAAQ3B,gBACnD4B,WAAa,CACfC,WAAY,8BACZC,KAAM,CACFJ,UAAWA,UACXC,OAAQA,SAGVI,SAAW5B,SAASC,eAAeqB,iBAGnCjB,YAAYuB,oBAGRC,kBAAoBC,cAAKC,KAAK,CAACN,aAAa,gCAC9CI,aAAeA,YAAYG,MAC3BnB,kBAAkBe,SAAUC,YAAYG,YAExCnB,kBAAkBe,uCAAUC,MAAAA,mBAAAA,YAAaI,wEAAoB,IAEnE,MAAOD,+BACLnB,kBAAkBe,6CAAWI,MAAAA,aAAAA,MAAOE,iDAAWF,6BAAnBG,KAA2BhB,YAI3DvB,oBAAoBC,QAAQ,6CA8CZ,CAACyB,UAAWC,UAAWC,OAAQ3B,UAjCzB,EAACA,OAAQyB,UAAWC,UAAWC,gBAC/CY,MAAQpC,SAASC,yBAAkBJ,2BACnCwC,MAAQrC,SAASC,yBAAkBJ,yBAErCuC,OACAA,MAAME,iBAAiB,SAAShC,MAAAA,IAC5BiC,EAAEC,iBACF5C,oBAAoBC,QAAQ,SAGtB+B,SAAW5B,SAASC,eAAeqB,iBACnCjB,YAAYuB,gBAEZP,SAASC,UAAWC,UAAWC,OAAQ3B,WAIjDwC,OACAA,MAAMC,iBAAiB,SAAUC,IAC7BA,EAAEC,iBACFC,OAAOC,SAASC,KAAOF,OAAOC,SAASE,SAAWH,OAAOC,SAASG,WAc1EC,CAAkBjD,OAAQyB,UAAWC,UAAWC,QACzCH,SAASC,UAAWC,UAAWC,OAAQ3B"}
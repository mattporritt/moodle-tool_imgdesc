{"version":3,"file":"describe.min.js","sources":["../src/describe.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AI Subsystem policy functions.\n *\n * @module     core_ai/repository\n * @copyright  Matt Porritt <matt.porritt@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.5\n */\n\nimport Ajax from 'core/ajax';\n\n/**\n * Toggle footer buttons visibility.\n *\n * @param {String} uniqid\n * @param {Boolean} show\n */\nconst toggleFooterButtons = (uniqid, show) => {\n    const footer = document.getElementById(`${uniqid}-footer`);\n    if (!footer) {\n        return;\n    }\n    if (show) {\n        footer.classList.remove('d-none');\n    } else {\n        footer.classList.add('d-none');\n    }\n};\n\n/**\n * Render a plaintext description into the target element.\n *\n * @param {HTMLElement} target\n * @param {String} description\n */\nconst renderDescription = (target, description) => {\n    target.removeAttribute('aria-busy');\n    target.classList.remove('bg-light');\n    // Preserve newlines but keep output safe/simple.\n    const escaped = document.createElement('div');\n    escaped.textContent = description || '';\n    target.innerHTML = `<div class=\"text-body\">${escaped.innerHTML.replace(/\\n/g, '<br>')}</div>`;\n};\n\n/**\n * Main entry to kick off generation.\n *\n * @param {String} textboxId - DOM id of the text container (e.g., \"{{uniqid}}-text-box\")\n * @param {Number} contextid  - Draft file area context ID\n * @param {Number} itemid     - Draft file item ID\n * @param {String} uniqid     - Unique id used to bind button handlers\n */\nexport const generate = async(textboxId, contextid, itemid, uniqid) => {\n    const requestobj = {\n        methodname: 'tool_imgdesc_describe_image',\n        args: {\n            contextid: contextid,\n            itemid: itemid,\n        }\n    };\n    const textarea = document.getElementById(textboxId);\n    try {\n        const responseObj = await Ajax.call([requestobj])[0];\n        if (responseObj.error) {\n            renderDescription(textarea, responseObj.error);\n        } else {\n            renderDescription(textarea, responseObj.generatedcontent);\n        }\n    } catch (error) {\n        renderDescription(textarea, error);\n    }\n    toggleFooterButtons(uniqid, true);\n};\n\n/**\n * Wire up footer actions:\n *  - Regenerate: re-run generation with same contextid/itemid.\n *  - New image: do a soft reset (reload the page so user gets original form).\n *\n * @param {String} uniqid\n * @param {String} textboxId\n * @param {Number} contextid\n * @param {Number} itemid\n */\nconst bindFooterActions = (uniqid, textboxId, contextid, itemid) => {\n    const regen = document.getElementById(`${uniqid}-btn-regenerate`);\n    const reset = document.getElementById(`${uniqid}-btn-newimage`);\n    if (regen) {\n        regen.addEventListener('click', async(e) => {\n            e.preventDefault();\n            toggleFooterButtons(uniqid, false);\n            await generate(textboxId, contextid, itemid, uniqid);\n        });\n    }\n    if (reset) {\n        reset.addEventListener('click', (e) => {\n            e.preventDefault();\n            // Minimal reset: reload the page to show original upload form.\n            window.location.href = window.location.pathname + window.location.search;\n        });\n    }\n};\n\n/**\n * Public bootstrap called from the template JS block.\n *\n * @param {String} textboxId\n * @param {Number} contextid\n * @param {Number} itemid\n * @param {String} uniqid\n */\nexport const init = (textboxId, contextid, itemid, uniqid) => {\n    bindFooterActions(uniqid, textboxId, contextid, itemid);\n    return generate(textboxId, contextid, itemid, uniqid);\n};\n\n"],"names":["toggleFooterButtons","uniqid","show","footer","document","getElementById","classList","remove","add","renderDescription","target","description","removeAttribute","escaped","createElement","textContent","innerHTML","replace","generate","async","textboxId","contextid","itemid","requestobj","methodname","args","textarea","responseObj","Ajax","call","error","generatedcontent","regen","reset","addEventListener","e","preventDefault","window","location","href","pathname","search","bindFooterActions"],"mappings":";;;;;;;;8JAgCMA,oBAAsB,CAACC,OAAQC,cAC3BC,OAASC,SAASC,yBAAkBJ,mBACrCE,SAGDD,KACAC,OAAOG,UAAUC,OAAO,UAExBJ,OAAOG,UAAUE,IAAI,YAUvBC,kBAAoB,CAACC,OAAQC,eAC/BD,OAAOE,gBAAgB,aACvBF,OAAOJ,UAAUC,OAAO,kBAElBM,QAAUT,SAASU,cAAc,OACvCD,QAAQE,YAAcJ,aAAe,GACrCD,OAAOM,2CAAsCH,QAAQG,UAAUC,QAAQ,MAAO,mBAWrEC,SAAWC,MAAMC,UAAWC,UAAWC,OAAQrB,gBAClDsB,WAAa,CACfC,WAAY,8BACZC,KAAM,CACFJ,UAAWA,UACXC,OAAQA,SAGVI,SAAWtB,SAASC,eAAee,qBAE/BO,kBAAoBC,cAAKC,KAAK,CAACN,aAAa,GAC9CI,YAAYG,MACZrB,kBAAkBiB,SAAUC,YAAYG,OAExCrB,kBAAkBiB,SAAUC,YAAYI,kBAE9C,MAAOD,OACLrB,kBAAkBiB,SAAUI,OAEhC9B,oBAAoBC,QAAQ,6CAwCZ,CAACmB,UAAWC,UAAWC,OAAQrB,UA3BzB,EAACA,OAAQmB,UAAWC,UAAWC,gBAC/CU,MAAQ5B,SAASC,yBAAkBJ,2BACnCgC,MAAQ7B,SAASC,yBAAkBJ,yBACrC+B,OACAA,MAAME,iBAAiB,SAASf,MAAAA,IAC5BgB,EAAEC,iBACFpC,oBAAoBC,QAAQ,SACtBiB,SAASE,UAAWC,UAAWC,OAAQrB,WAGjDgC,OACAA,MAAMC,iBAAiB,SAAUC,IAC7BA,EAAEC,iBAEFC,OAAOC,SAASC,KAAOF,OAAOC,SAASE,SAAWH,OAAOC,SAASG,WAc1EC,CAAkBzC,OAAQmB,UAAWC,UAAWC,QACzCJ,SAASE,UAAWC,UAAWC,OAAQrB"}